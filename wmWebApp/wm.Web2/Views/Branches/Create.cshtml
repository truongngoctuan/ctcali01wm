@model wm.Model.Branch

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Branch</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<button name="load" id="load" class="intext-btn" onclick="loadOrder()">Load</button>
<button name="save" id="save" class="intext-btn" onclick="saveOrder()">Save</button>
<div id="example"></div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        //================================================================================
        //helper
        function ajaxPOSTRequest(href, dataObject, onSuccessCallback) {
            $.ajax({
                url: href,
                data: dataObject,
                cache: false,
                type: "POST",
                dataType: "html",
                success: onSuccessCallback
            });
        }
        //================================================================================
        var $$ = function (id) {
            return document.getElementById(id);
        },
    container = $$('example'),
    exampleConsole = $$('example1console'),
    autosave = $$('autosave'),
    load = $$('load'),
    save = $$('save'),
    autosaveNotification,
    hot,
    dataInput;

        hot = new Handsontable(container, {
            startRows: 1,
            startCols: 2,
            rowHeaders: true,
            colHeaders: false,
            manualRowMove: true,
            dataSchema: { Id: null, Name: null, RecommendedQuantity: null, Quantity: null },
            columns: [//TODO: change colorbackground for readonly
              //{ data: 'CategoryId', readOnly: true },
              { data: 'Name', readOnly: true },
              { data: 'IsChecked', type: 'checkbox' },
            ],
            afterChange: function (change, source) {
                if (source === 'loadData') {
                    return; //don't save this change
                }
                //if (!autosave.checked) {
                //    return;
                //}
                clearTimeout(autosaveNotification);
                console.log("change: " + JSON.stringify(hot.getSourceDataAtRow(change[0][0])));

                @*$.ajax({
                    url: '@Url.Action("PlacingOrder")',
                    data: JSON.stringify({ data: change }),
                    cache: false,
                    type: "POST",
                    dataType: "html",
                    success: function (data, textStatus, XMLHttpRequest) {
                        console.log(data);
                    }
                });*@


            },
            afterRowMove: function (startRow, endRow) {
                var temp = dataInput[startRow].Ranking;
                dataInput[startRow].Ranking = dataInput[endRow].Ranking;
                dataInput[endRow].Ranking = temp;
                console.log("Move row: " + startRow + " " + endRow);
            }
        });


        function loadOrder() {
            ajaxPOSTRequest('@Url.Action("CreateEditBranchGoodCategory")', {},
                function (data, textStatus, XMLHttpRequest) {
                    console.log("client received: " + data);

                    dataInput = JSON.parse(data);
                    hot.loadData(dataInput);

                });
        }

        function saveOrder() {
            console.log("local data: " + JSON.stringify({ data: dataInput }));

            //console.log("sending data to server: " + JSON.stringify({ data: hot.getSourceData() }));

            //only send checked items to server
            var dataOutputFiltered = [];
            for (i = 0; i < dataInput.length; i++) {
                if (dataInput[i].IsChecked == true) {
                    dataOutputFiltered.push(dataInput[i]);
                }
            }

            ajaxPOSTRequest('@Url.Action("PlacingOrder")',
                { data: dataOutputFiltered },
                function (data, textStatus, XMLHttpRequest) {
                    var dataObject = JSON.parse(data);

                    //hot.loadData(dataObject);
                    console.log("server receive data: " + data);

                    //// save all cell's data
                    //ajax('scripts/json/save.json', 'GET', JSON.stringify({ data: hot.getData() }), function (res) {
                    //    var response = JSON.parse(res.response);

                    //    if (response.result === 'ok') {
                    //        exampleConsole.innerText = 'Data saved';
                    //    }
                    //    else {
                    //        exampleConsole.innerText = 'Save error';
                    //    }
                    //});
                });
        }



        //Handsontable.Dom.addEvent(autosave, 'click', function () {
        //    if (autosave.checked) {
        //        exampleConsole.innerText = 'Changes will be autosaved';
        //    }
        //    else {
        //        exampleConsole.innerText = 'Changes will not be autosaved';
        //    }
        //});

    </script>
}
