@model wm.Model.MultiPurposeList

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

<div class="col-md-6 col-xs-12">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>GoodCategory</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>


<div class="col-md-6 col-xs-12">
    <h4>Update good categories</h4>
    <hr />
    <div class="row form-group col-md-10 col-md-offset-2">
        @if (ViewBag.isInEx == true)
        {
            <input type="checkbox" id="cbSwitchToOrder" />
        }
        else
        {
            <input type="checkbox" id="cbSwitchToOrder" checked="checked" />
        }
        Enable sort
    </div>



    <div id="groupIncludeExclude">
        <div class="form-group row col-md-10 col-md-offset-2"> Check/Uncheck Items</div>
        <div class="col-md-12">
            <table id="example" class="display select" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        <th><input type="checkbox" name="select-all" value="1"></th>
                        <th>AccountantCode</th>
                        <th>Id</th>
                        <th>Name</th>
                        <th>UnitName</th>
                        <th>GoodType</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th></th>
                        <th>AccountantCode</th>
                        <th>Id</th>
                        <th>Name</th>
                        <th>UnitName</th>
                        <th>GoodType</th>
                    </tr>
                </tfoot>
            </table>
            <button onclick="saveIncludeExclude2()" class="btn btn-danger">Save</button>
        </div>
    </div>
    <div id="groupOrder">
        <div class="form-group row col-md-10 col-md-offset-2"> Sort Items</div>
        <div class="form-group row col-md-10 col-md-offset-2">
            <div id="hsOrder" class=""></div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button name="save" id="save" class="btn btn-danger" onclick="saveOrder()">Save</button>
            </div>
        </div>
    </div>


</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/NNToNNModule.js"></script>
    <script src="~/Content/HandsonTableSortingModule.js"></script>
    <script>
        function saveIncludeExclude2() {
            window.tableNN.Save();
        }
        
        function saveOrder() {
            window.sortingNN.Save();
        }

        //switch
        $('#cbSwitchToOrder').click(function() {
            cbSwitchToOrderFunction(this);
        });

        function cbSwitchToOrderFunction(obj) {
            var $this = $(obj);
            // $this will contain a reference to the checkbox
            if ($this.is(':checked')) {
                // the checkbox was checked
                //load ordering
                $("#groupIncludeExclude").hide();
                $("#groupOrder").show();
                window.sortingNN.init();
            } else {
                // the checkbox was unchecked
                //load include/exclude
                $("#groupIncludeExclude").show();
                $("#groupOrder").hide();
                //window.tableNN.loadIncludeExclude2();
                window.tableNN.init();
            }
        }

        $(document).ready(function() {
            window.tableNN = new NNToNN(@Model.Id, "@Url.Action("List")", "@Url.Action("IncludeExcludeNnData")",
                "#example",
                [
                    {
                        "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Id))",
                        'searchable': false,
                        'orderable': false,
                        'className': 'dt-body-center',
                        'render': function (data, type, full, meta) {
                            if (full.IsChecked) {
                                return '<input type="checkbox" name="id[]" value="' + data + '" checked="checked">';
                            }
                            return '<input type="checkbox" name="id[]" value="' + data + '">';
                        }
                    },
                    { "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.AccoutantCode))" },
                    { "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Id))" },
                    { "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Name))" },
                    { "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.UnitName))" },
                    { "data": "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Ranking))" }
                ]);

            window.sortingNN = new HandsonTableSorting(@Model.Id, "@Url.Action("PopulateData")", '@Url.Action("SortNnData")',
                "hsOrder",
                ["@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Name))",
                "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Ranking))"],
                [
                { data: "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Name))", readOnly: true },
                { data: "@(hhs.GetName((wm.Web2.Models.MultiPurposeListInExItemViewModel p) => p.Ranking))", readOnly: true },
                ]);
            cbSwitchToOrderFunction($('#cbSwitchToOrder'));
        });

    </script>
}